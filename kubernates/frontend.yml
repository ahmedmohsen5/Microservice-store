apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: microservice
  labels:
    service: frontend
spec:
  selector:
    matchLabels:
      service: frontend
  template:
    metadata:
      labels:
        service: frontend
    spec:
      containers:
      - image: frontend
        name: frontend
        imagePullPolicy: Never
        resources:
          requests:
            cpu: "20m"
            memory: "55M"
          limits:
            cpu: "100m"
            memory: "100M"
        env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendationservice:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "adservice:9555"
          - name: SHOPPING_ASSISTANT_SERVICE_ADDR
            value: "shoppingassistantservice:80"
          # # ENV_PLATFORM: One of: local, gcp, aws, azure, onprem, alibaba
          # # When not set, defaults to "local" unless running in GKE, otherwies auto-sets to gcp
          # - name: ENV_PLATFORM
          #   value: "aws"
          - name: ENABLE_PROFILER
            value: "0"
          # - name: CYMBAL_BRANDING
          #   value: "true"
          # - name: ENABLE_ASSISTANT
          #   value: "true"
          # - name: FRONTEND_MESSAGE
          #   value: "Replace this with a message you want to display on all pages."
          # As part of an optional Google Cloud demo, you can run an optional microservice called the "packaging service".
          # - name: PACKAGING_SERVICE_URL
          #   value: "" # This value would look like "http://123.123.123"    
        ports:
        - containerPort:  8080
          name: frontend
---
kind: Service
apiVersion: v1
metadata:
  name: frontendport
  namespace: microservice
spec:
  selector:
    service: frontend
  type:  ClusterIP 
  ports:
  - name: http-port
    port:  80
    targetPort:  8080
---
kind: Service
apiVersion: v1
metadata:
  name:  frontend-external
  namespace: microservice
spec:
  selector:
    service:  frontend
  type:  LoadBalancer
  ports:
  - name:  http-port
    port:  80
    targetPort:  8080